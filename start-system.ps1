# üöÄ SISTEMA DE INICIO AUTOM√ÅTICO ABOGADO WILSON üöÄ
# Script profesional con diagn√≥stico y correcci√≥n autom√°tica de errores

param(
    [switch]$Diagnostic,
    [switch]$AutoFix,
    [switch]$Force,
    [switch]$Verbose
)

# Configuraci√≥n de colores para output profesional
$Host.UI.RawUI.ForegroundColor = "White"
$Host.UI.RawUI.BackgroundColor = "Black"

# Funci√≥n para mostrar mensajes con colores
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White",
        [string]$Prefix = ""
    )
    
    $timestamp = Get-Date -Format "HH:mm:ss"
    $coloredMessage = "$Prefix [$timestamp] $Message"
    
    switch ($Color) {
        "Green" { Write-Host $coloredMessage -ForegroundColor Green }
        "Red" { Write-Host $coloredMessage -ForegroundColor Red }
        "Yellow" { Write-Host $coloredMessage -ForegroundColor Yellow }
        "Cyan" { Write-Host $coloredMessage -ForegroundColor Cyan }
        "Magenta" { Write-Host $coloredMessage -ForegroundColor Magenta }
        default { Write-Host $coloredMessage -ForegroundColor White }
    }
}

# Funci√≥n para mostrar banner del sistema
function Show-Banner {
    Clear-Host
    Write-ColorOutput "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" "Cyan"
    Write-ColorOutput "‚ïë                    üèõÔ∏è  ABOGADO WILSON üèõÔ∏è                    ‚ïë" "Cyan"
    Write-ColorOutput "‚ïë              SISTEMA LEGAL PROFESIONAL v1.0.0               ‚ïë" "Cyan"
    Write-ColorOutput "‚ïë                                                              ‚ïë" "Cyan"
    Write-ColorOutput "‚ïë           üöÄ INICIANDO SISTEMA AUTOM√ÅTICO üöÄ               ‚ïë" "Cyan"
    Write-ColorOutput "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" "Cyan"
    Write-Host ""
}

# Funci√≥n para verificar si Node.js est√° instalado
function Test-NodeJS {
    Write-ColorOutput "üîç Verificando instalaci√≥n de Node.js..." "Yellow"
    
    try {
        $nodeVersion = node --version 2>$null
        if ($nodeVersion) {
            Write-ColorOutput "‚úÖ Node.js instalado: $nodeVersion" "Green"
            return $true
        }
    } catch {
        Write-ColorOutput "‚ùå Node.js no encontrado" "Red"
        return $false
    }
    
    return $false
}

# Funci√≥n para instalar Node.js autom√°ticamente
function Install-NodeJS {
    Write-ColorOutput "üì¶ Instalando Node.js autom√°ticamente..." "Yellow"
    
    try {
        # Descargar e instalar Node.js
        $nodeUrl = "https://nodejs.org/dist/v20.11.1/node-v20.11.1-x64.msi"
        $nodeInstaller = "$env:TEMP\node-installer.msi"
        
        Write-ColorOutput "‚¨áÔ∏è  Descargando Node.js..." "Cyan"
        Invoke-WebRequest -Uri $nodeUrl -OutFile $nodeInstaller
        
        Write-ColorOutput "üîß Instalando Node.js..." "Cyan"
        Start-Process msiexec.exe -Wait -ArgumentList "/i $nodeInstaller /quiet"
        
        # Limpiar archivo temporal
        Remove-Item $nodeInstaller -Force
        
        Write-ColorOutput "‚úÖ Node.js instalado correctamente" "Green"
        
        # Refrescar PATH
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        
        return $true
        
    } catch {
        Write-ColorOutput "‚ùå Error al instalar Node.js: $($_.Exception.Message)" "Red"
        return $false
    }
}

# Funci√≥n para verificar dependencias del proyecto
function Test-ProjectDependencies {
    Write-ColorOutput "üîç Verificando dependencias del proyecto..." "Yellow"
    
    if (Test-Path "package.json") {
        Write-ColorOutput "‚úÖ package.json encontrado" "Green"
        
        # Verificar si node_modules existe
        if (Test-Path "node_modules") {
            Write-ColorOutput "‚úÖ Dependencias ya instaladas" "Green"
            return $true
        } else {
            Write-ColorOutput "üì¶ Instalando dependencias..." "Yellow"
            try {
                npm install
                Write-ColorOutput "‚úÖ Dependencias instaladas correctamente" "Green"
                return $true
            } catch {
                Write-ColorOutput "‚ùå Error al instalar dependencias: $($_.Exception.Message)" "Red"
                return $false
            }
        }
    } else {
        Write-ColorOutput "‚ùå package.json no encontrado" "Red"
        return $false
    }
}

# Funci√≥n para verificar archivos cr√≠ticos
function Test-CriticalFiles {
    Write-ColorOutput "üîç Verificando archivos cr√≠ticos..." "Yellow"
    
    $criticalFiles = @(
        "src/App.jsx",
        "src/main.jsx",
        "vite.config.js",
        "tailwind.config.js",
        "index.html"
    )
    
    $missingFiles = @()
    
    foreach ($file in $criticalFiles) {
        if (Test-Path $file) {
            Write-ColorOutput "‚úÖ $file" "Green"
        } else {
            Write-ColorOutput "‚ùå $file - FALTANTE" "Red"
            $missingFiles += $file
        }
    }
    
    return $missingFiles.Count -eq 0
}

# Funci√≥n para corregir errores comunes
function Fix-CommonErrors {
    Write-ColorOutput "üîß Aplicando correcciones autom√°ticas..." "Yellow"
    
    # 1. Corregir archivo roleMiddleware.js si contiene JSX
    $roleMiddlewarePath = "src/middleware/roleMiddleware.js"
    if (Test-Path $roleMiddlewarePath) {
        $content = Get-Content $roleMiddlewarePath -Raw
        if ($content -match "jsx|className|<div") {
            Write-ColorOutput "üîÑ Renombrando roleMiddleware.js a .jsx..." "Cyan"
            $newPath = $roleMiddlewarePath.Replace(".js", ".jsx")
            Move-Item $roleMiddlewarePath $newPath -Force
            Write-ColorOutput "‚úÖ Archivo renombrado correctamente" "Green"
        }
    }
    
    # 2. Verificar y corregir imports en App.jsx
    $appPath = "src/App.jsx"
    if (Test-Path $appPath) {
        Write-ColorOutput "üîç Verificando imports en App.jsx..." "Cyan"
        
        $content = Get-Content $appPath -Raw
        
        # Corregir import de Services
        if ($content -match 'import Services from "\./components/Services/Services"') {
            $content = $content -replace 'import Services from "\./components/Services/Services"', 'import Services from "./components/Services/ServicesPage"'
            Write-ColorOutput "‚úÖ Import de Services corregido" "Green"
        }
        
        # Corregir import de Ebooks
        if ($content -match 'import Ebooks from "\./components/Ebooks/Ebooks"') {
            $content = $content -replace 'import Ebooks from "\./components/Ebooks/Ebooks"', 'import Ebooks from "./components/Ebooks/EbookStore"'
            Write-ColorOutput "‚úÖ Import de Ebooks corregido" "Green"
        }
        
        # Corregir import de CourseCatalog
        if ($content -match 'import CourseCatalog from "\./components/Courses/CourseCatalog"') {
            $content = $content -replace 'import CourseCatalog from "\./components/Courses/CourseCatalog"', 'import CourseCatalog from "./components/Courses/CourseSystem"'
            Write-ColorOutput "‚úÖ Import de CourseCatalog corregido" "Green"
        }
        
        # Corregir import de CourseDetail
        if ($content -match 'import CourseDetail from "\./components/Courses/CourseDetail"') {
            $content = $content -replace 'import CourseDetail from "\./components/Courses/CourseDetail"', 'import CourseDetail from "./pages/CourseDetailPage"'
            Write-ColorOutput "‚úÖ Import de CourseDetail corregido" "Green"
        }
        
        # Guardar cambios
        Set-Content $appPath $content -Encoding UTF8
        Write-ColorOutput "‚úÖ App.jsx corregido y guardado" "Green"
    }
    
    # 3. Crear archivo .env si no existe
    if (-not (Test-Path ".env")) {
        Write-ColorOutput "üìù Creando archivo .env..." "Cyan"
        Copy-Item "env.config" ".env" -Force
        Write-ColorOutput "‚úÖ Archivo .env creado" "Green"
    }
}

# Funci√≥n para iniciar servidor de desarrollo
function Start-DevelopmentServer {
    Write-ColorOutput "üöÄ Iniciando servidor de desarrollo..." "Yellow"
    
    try {
        # Verificar si hay procesos de Node.js corriendo
        $nodeProcesses = Get-Process -Name "node" -ErrorAction SilentlyContinue
        if ($nodeProcesses) {
            Write-ColorOutput "üîÑ Deteniendo procesos de Node.js existentes..." "Cyan"
            $nodeProcesses | Stop-Process -Force
            Start-Sleep -Seconds 2
        }
        
        # Verificar puerto 5173
        $portInUse = Get-NetTCPConnection -LocalPort 5173 -ErrorAction SilentlyContinue
        if ($portInUse) {
            Write-ColorOutput "üîÑ Liberando puerto 5173..." "Cyan"
            $portInUse | Stop-Process -Force
            Start-Sleep -Seconds 2
        }
        
        Write-ColorOutput "üåê Iniciando servidor en puerto 5173..." "Cyan"
        
        # Iniciar servidor con npm
        Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd '$PWD'; npm run dev" -WindowStyle Normal
        
        Write-ColorOutput "‚úÖ Servidor iniciado correctamente" "Green"
        Write-ColorOutput "üåê Accede a: http://localhost:5173" "Cyan"
        Write-ColorOutput "üì± Red local: http://192.168.0.104:5173" "Cyan"
        
        return $true
        
    } catch {
        Write-ColorOutput "‚ùå Error al iniciar servidor: $($_.Exception.Message)" "Red"
        return $false
    }
}

# Funci√≥n principal del sistema
function Start-System {
    Show-Banner
    
    Write-ColorOutput "üöÄ INICIANDO SISTEMA AUTOM√ÅTICO ABOGADO WILSON" "Magenta"
    Write-Host ""
    
    # Paso 1: Verificar Node.js
    if (-not (Test-NodeJS)) {
        Write-ColorOutput "üì¶ Node.js no encontrado, instalando autom√°ticamente..." "Yellow"
        if (-not (Install-NodeJS)) {
            Write-ColorOutput "‚ùå No se pudo instalar Node.js. Sistema no puede continuar." "Red"
            return $false
        }
    }
    
    # Paso 2: Verificar dependencias
    if (-not (Test-ProjectDependencies)) {
        Write-ColorOutput "‚ùå Error en dependencias del proyecto. Sistema no puede continuar." "Red"
        return $false
    }
    
    # Paso 3: Verificar archivos cr√≠ticos
    if (-not (Test-CriticalFiles)) {
        Write-ColorOutput "‚ö†Ô∏è  Algunos archivos cr√≠ticos est√°n faltantes" "Yellow"
        if ($AutoFix -or $Force) {
            Write-ColorOutput "üîß Aplicando correcciones autom√°ticas..." "Yellow"
            Fix-CommonErrors
        }
    }
    
    # Paso 4: Aplicar correcciones si se solicita
    if ($AutoFix -or $Force) {
        Fix-CommonErrors
    }
    
    # Paso 5: Iniciar servidor
    if (Start-DevelopmentServer) {
        Write-Host ""
        Write-ColorOutput "üéâ ¬°SISTEMA INICIADO EXITOSAMENTE!" "Green"
        Write-ColorOutput "üèõÔ∏è  Abogado Wilson est√° listo para servir" "Green"
        Write-Host ""
        
        # Mostrar informaci√≥n del sistema
        Write-ColorOutput "üìä INFORMACI√ìN DEL SISTEMA:" "Cyan"
        Write-ColorOutput "   ‚Ä¢ Servidor: http://localhost:5173" "White"
        Write-ColorOutput "   ‚Ä¢ Red local: http://192.168.0.104:5173" "White"
        Write-ColorOutput "   ‚Ä¢ Puerto: 5173" "White"
        Write-ColorOutput "   ‚Ä¢ Modo: Desarrollo" "White"
        Write-ColorOutput "   ‚Ä¢ Estado: Activo" "White"
        
        return $true
    } else {
        Write-ColorOutput "‚ùå Error al iniciar sistema" "Red"
        return $false
    }
}

# Funci√≥n para mostrar ayuda
function Show-Help {
    Write-ColorOutput "üìñ AYUDA DEL SISTEMA ABOGADO WILSON" "Cyan"
    Write-Host ""
    Write-ColorOutput "Uso:" "White"
    Write-ColorOutput "  .\start-system.ps1 [opciones]" "White"
    Write-Host ""
    Write-ColorOutput "Opciones:" "White"
    Write-ColorOutput "  -Diagnostic    Ejecutar diagn√≥stico completo del sistema" "White"
    Write-ColorOutput "  -AutoFix       Aplicar correcciones autom√°ticas" "White"
    Write-ColorOutput "  -Force         Forzar inicio ignorando errores" "White"
    Write-ColorOutput "  -Verbose       Mostrar informaci√≥n detallada" "White"
    Write-ColorOutput "  -Help          Mostrar esta ayuda" "White"
    Write-Host ""
    Write-ColorOutput "Ejemplos:" "White"
    Write-ColorOutput "  .\start-system.ps1                    # Inicio normal" "White"
    Write-ColorOutput "  .\start-system.ps1 -AutoFix          # Con correcciones autom√°ticas" "White"
    Write-ColorOutput "  .\start-system.ps1 -Diagnostic       # Solo diagn√≥stico" "White"
    Write-ColorOutput "  .\start-system.ps1 -Force -Verbose   # Forzar con informaci√≥n detallada" "White"
}

# Funci√≥n para ejecutar diagn√≥stico
function Run-Diagnostic {
    Show-Banner
    Write-ColorOutput "üîç EJECUTANDO DIAGN√ìSTICO COMPLETO DEL SISTEMA" "Magenta"
    Write-Host ""
    
    # Verificar Node.js
    Write-ColorOutput "1Ô∏è‚É£  Verificando Node.js..." "Yellow"
    if (Test-NodeJS) {
        Write-ColorOutput "   ‚úÖ Node.js funcionando correctamente" "Green"
    } else {
        Write-ColorOutput "   ‚ùå Node.js no encontrado" "Red"
    }
    
    # Verificar dependencias
    Write-ColorOutput "2Ô∏è‚É£  Verificando dependencias..." "Yellow"
    if (Test-ProjectDependencies) {
        Write-ColorOutput "   ‚úÖ Dependencias del proyecto OK" "Green"
    } else {
        Write-ColorOutput "   ‚ùå Problemas con dependencias" "Red"
    }
    
    # Verificar archivos cr√≠ticos
    Write-ColorOutput "3Ô∏è‚É£  Verificando archivos cr√≠ticos..." "Yellow"
    if (Test-CriticalFiles) {
        Write-ColorOutput "   ‚úÖ Archivos cr√≠ticos OK" "Green"
    } else {
        Write-ColorOutput "   ‚ùå Archivos cr√≠ticos faltantes" "Red"
    }
    
    # Verificar puertos
    Write-ColorOutput "4Ô∏è‚É£  Verificando puertos..." "Yellow"
    $port5173 = Get-NetTCPConnection -LocalPort 5173 -ErrorAction SilentlyContinue
    if ($port5173) {
        Write-ColorOutput "   ‚ö†Ô∏è  Puerto 5173 en uso" "Yellow"
    } else {
        Write-ColorOutput "   ‚úÖ Puerto 5173 disponible" "Green"
    }
    
    Write-Host ""
    Write-ColorOutput "üîç DIAGN√ìSTICO COMPLETADO" "Green"
}

# Funci√≥n principal del script
function Main {
    # Verificar si se solicita ayuda
    if ($args -contains "-Help" -or $args -contains "-h") {
        Show-Help
        return
    }
    
    # Verificar si se solicita solo diagn√≥stico
    if ($Diagnostic) {
        Run-Diagnostic
        return
    }
    
    # Ejecutar sistema principal
    $success = Start-System
    
    if ($success) {
        Write-Host ""
        Write-ColorOutput "üéØ Sistema Abogado Wilson iniciado exitosamente" "Green"
        Write-ColorOutput "üì± Accede a http://localhost:5173 en tu navegador" "Cyan"
        Write-ColorOutput "üîß Para detener el servidor, presiona Ctrl+C" "Yellow"
    } else {
        Write-Host ""
        Write-ColorOutput "‚ùå Error al iniciar sistema Abogado Wilson" "Red"
        Write-ColorOutput "üîç Ejecuta .\start-system.ps1 -Diagnostic para m√°s informaci√≥n" "Yellow"
        Write-ColorOutput "üõ†Ô∏è  Ejecuta .\start-system.ps1 -AutoFix para correcciones autom√°ticas" "Yellow"
    }
}

# Ejecutar funci√≥n principal
Main
